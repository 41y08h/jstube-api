generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["selectRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Provider {
  GOOGLE
}

model User {
  id                Int             @id @default(autoincrement())
  name              String          @db.VarChar(255)
  email             String          @unique @db.VarChar(255)
  picture           String?
  provider          Provider
  providerAccountId String          @db.VarChar(100)
  comments          Comment[]
  videos            Video[]
  createdAt         DateTime        @default(now())
  commentRatings    CommentRating[]
  videoRatings      VideoRating[]
  subscribers       Subscriber[]    @relation("subscriber")
  subscriptions     Subscriber[]    @relation("channel")
}

model Video {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  src         String
  thumbnail   String
  duration    Int
  userId      Int
  views       Int?          @default(0)
  channel     User?         @relation(fields: [userId], references: [id])
  comments    Comment[]
  uploadedAt  DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  ratings     VideoRating[]
}

model Comment {
  id               Int             @id @default(autoincrement())
  text             String          @db.VarChar(1000)
  baseCommentId    Int?
  baseComment      Comment?        @relation("baseComment", fields: [baseCommentId], references: [id])
  replies          Comment[]       @relation("baseComment")
  replyToCommentId Int?
  replyToComment   Comment?        @relation("replyToComment", fields: [replyToCommentId], references: [id])
  directReplies    Comment[]       @relation("replyToComment")
  userId           Int
  author           User            @relation(fields: [userId], references: [id])
  videoId          Int
  commentedOnVideo Video           @relation(fields: [videoId], references: [id])
  commentedAt      DateTime        @default(now())
  editedAt         DateTime        @updatedAt
  Rating           CommentRating[]
}

enum RatingStatus {
  LIKED
  DISLIKED
}

model VideoRating {
  id      Int          @id @default(autoincrement())
  status  RatingStatus
  userId  Int
  ratedBy User         @relation(fields: [userId], references: [id])
  videoId Int?
  video   Video?       @relation(fields: [videoId], references: [id])

  @@unique([videoId, userId])
}

model CommentRating {
  id        Int          @id @default(autoincrement())
  status    RatingStatus
  userId    Int
  ratedBy   User         @relation(fields: [userId], references: [id])
  commentId Int?
  comment   Comment?     @relation(fields: [commentId], references: [id])

  @@unique([commentId, userId])
}

model Subscriber {
  id        Int  @id @default(autoincrement())
  channelId Int
  channel   User @relation("channel", fields: [channelId], references: [id])
  userId    Int
  user      User @relation("subscriber", fields: [userId], references: [id])

  @@unique([channelId, userId])
}
